AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  API Gateway proxy to SNS topic
  
  API gateway that publish message to sns topic and return 200.
Parameters: 
  ApiGatewayBaseStackName:
    Type: String
    Default: base-api-gw
  StageName:
    Type: String
    Default: v1
  FunctionStackName:
    Type: String
    Default: apigw-pingpong

Resources:
  SamPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: sam
      ParentId: 
        Fn::ImportValue:
          !Sub "${ApiGatewayBaseStackName}-ApiGwRootResourceID"
      RestApiId:
        Fn::ImportValue:
          !Sub "${ApiGatewayBaseStackName}-ApiGwLogicalID"
        
  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: PostMethod
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "${ApiGatewayBaseStackName}-ApiGwLogicalID"
      StageName: !Ref "StageName"

  PostRequestModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Description: Schema for calculator API
      RestApiId:
        Fn::ImportValue:
          !Sub "${ApiGatewayBaseStackName}-ApiGwLogicalID"
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: CalculatorRequest
        type: object
        properties:
          a:
            type: integer
          b:
            type: integer
          ops:
            type: string

  SuccessCalcResponseModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Description: Schema for response of calculator API
      RestApiId:
        Fn::ImportValue:
          !Sub "${ApiGatewayBaseStackName}-ApiGwLogicalID"
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: CalcResponseModel
        type: object
        properties:
          value:
            type: integer

  PostRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      RestApiId:
        Fn::ImportValue:
          !Sub "${ApiGatewayBaseStackName}-ApiGwLogicalID"
      ValidateRequestBody: true
      ValidateRequestParameters: true

  PostMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        HttpMethod: POST
        AuthorizationType: "NONE"
        ResourceId: !Ref SamPath
        RestApiId:
          Fn::ImportValue:
            !Sub "${ApiGatewayBaseStackName}-ApiGwLogicalID"
        RequestModels:
          "application/json": !Ref PostRequestModel
        RequestValidatorId: !Ref PostRequestValidator
        Integration:
          Type: "AWS"
          IntegrationHttpMethod: "POST"
          Uri: 
            Fn::Sub:
              -  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
              - lambdaArn: 
                  Fn::ImportValue:
                    !Sub "${FunctionStackName}-PingPongFunctionArn"
          IntegrationResponses:
            - StatusCode: 200
            - SelectionPattern: '^\[Unknown\].*'
              StatusCode: 400
          Credentials: !GetAtt PingPongMethodRole.Arn
        MethodResponses:
          - ResponseModels:
               "application/json": !Ref SuccessCalcResponseModel
            StatusCode: 200
          - StatusCode: 400


  PingPongMethodRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - "sts:AssumeRole"
            Principal:
              Service:
              - "apigateway.amazonaws.com"
            Effect: "Allow"
        Policies:
        - PolicyName: "FunctionInvoke"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action:
              - lambda:InvokeFunction
              - lambda:InvokeAsync
              Resource: 
                Fn::ImportValue: !Sub "${FunctionStackName}-PingPongFunctionArn"
              Effect: "Allow"
            - Action:
                - logs:PutLogEvents
                - logs:CreateLogGroup
                - logs:CreateLogStream
              Resource: "*"
              Effect: Allow
